internal sealed class ClientConfigurationHost : DelegatingConfigHost, IInternalConfigClientHost
{
    // Fields
    internal const string MachineConfigName = "MACHINE";
    internal const string ExeConfigName = "EXE";
    internal const string RoamingUserConfigName = "ROAMING_USER";
    internal const string LocalUserConfigName = "LOCAL_USER";
    internal const string MachineConfigPath = "MACHINE";
    internal const string ExeConfigPath = "MACHINE/EXE";
    internal const string RoamingUserConfigPath = "MACHINE/EXE/ROAMING_USER";
    internal const string LocalUserConfigPath = "MACHINE/EXE/ROAMING_USER/LOCAL_USER";
    private const string ConfigExtension = ".config";
    private const string MachineConfigFilename = "machine.config";
    private const string MachineConfigSubdirectory = "Config";
    private static object s_init = new object();
    private static object s_version = new object();
    private static volatile string s_machineConfigFilePath;
    private string _exePath;
    private ClientConfigPaths _configPaths;
    private ExeConfigurationFileMap _fileMap;
    private bool _initComplete;

    // Methods
    internal ClientConfigurationHost()
    {
        base.Host = new InternalConfigHost();
    }

    public override object CreateConfigurationContext(string configPath, string locationSubPath) => 
        new ExeContext(this.GetUserLevel(configPath), this.ConfigPaths.ApplicationUri);

    public override object CreateDeprecatedConfigContext(string configPath) => 
        null;

    public override void DeleteStream(string streamName)
    {
        if (!this.IsFile(streamName))
        {
            throw ExceptionUtil.UnexpectedError("ClientConfigurationHost::Delete");
        }
        base.Host.DeleteStream(streamName);
    }

    [SecurityPermission(SecurityAction.Assert, ControlEvidence=true)]
    public override void GetRestrictedPermissions(IInternalConfigRecord configRecord, out PermissionSet permissionSet, out bool isHostReady)
    {
        bool flag = this.IsFile(configRecord.StreamName);
        string name = !flag ? configRecord.StreamName : UrlPath.ConvertFileNameToUrl(configRecord.StreamName);
        Evidence evidence = new Evidence();
        evidence.AddHostEvidence<Url>(new Url(name));
        evidence.AddHostEvidence<Zone>(Zone.CreateFromUrl(name));
        if (!flag)
        {
            evidence.AddHostEvidence<Site>(Site.CreateFromUrl(name));
        }
        permissionSet = SecurityManager.GetStandardSandbox(evidence);
        isHostReady = true;
    }

    public override string GetStreamName(string configPath)
    {
        string name = ConfigPathUtility.GetName(configPath);
        if (this._fileMap != null)
        {
            if (name != "MACHINE")
            {
                if (name == "EXE")
                {
                    return this._fileMap.ExeConfigFilename;
                }
                if (name == "ROAMING_USER")
                {
                    return this._fileMap.RoamingUserConfigFilename;
                }
                if (name == "LOCAL_USER")
                {
                    return this._fileMap.LocalUserConfigFilename;
                }
            }
            return this._fileMap.MachineConfigFilename;
        }
        if (name != "MACHINE")
        {
            if (name == "EXE")
            {
                return this.ConfigPaths.ApplicationConfigUri;
            }
            if (name == "ROAMING_USER")
            {
                return this.ConfigPaths.RoamingConfigFilename;
            }
            if (name == "LOCAL_USER")
            {
                return this.ConfigPaths.LocalConfigFilename;
            }
        }
        return MachineConfigFilePath;
    }

    public override string GetStreamNameForConfigSource(string streamName, string configSource)
    {
        if (this.IsFile(streamName))
        {
            return base.Host.GetStreamNameForConfigSource(streamName, configSource);
        }
        int num = streamName.LastIndexOf('/');
        return ((num >= 0) ? (streamName.Substring(0, num + 1) + configSource.Replace('\\', '/')) : null);
    }

    public override object GetStreamVersion(string streamName) => 
        !this.IsFile(streamName) ? s_version : base.Host.GetStreamVersion(streamName);

    private ConfigurationUserLevel GetUserLevel(string configPath)
    {
        string name = ConfigPathUtility.GetName(configPath);
        return ((name == "MACHINE") ? ConfigurationUserLevel.None : ((name == "EXE") ? ConfigurationUserLevel.None : ((name == "LOCAL_USER") ? ConfigurationUserLevel.PerUserRoamingAndLocal : ((name == "ROAMING_USER") ? ConfigurationUserLevel.PerUserRoaming : ConfigurationUserLevel.None))));
    }

    [SecurityPermission(SecurityAction.Assert, Flags=SecurityPermissionFlag.ControlPrincipal | SecurityPermissionFlag.UnmanagedCode)]
    public override IDisposable Impersonate() => 
        WindowsIdentity.Impersonate(IntPtr.Zero);

    public override void Init(IInternalConfigRoot configRoot, params object[] hostInitParams)
    {
        try
        {
            ConfigurationFileMap map = (ConfigurationFileMap) hostInitParams[0];
            this._exePath = (string) hostInitParams[1];
            base.Host.Init(configRoot, hostInitParams);
            this._initComplete = configRoot.IsDesignTime;
            if ((map != null) && !string.IsNullOrEmpty(this._exePath))
            {
                throw ExceptionUtil.UnexpectedError("ClientConfigurationHost::Init");
            }
            if (string.IsNullOrEmpty(this._exePath))
            {
                this._exePath = null;
            }
            if (map != null)
            {
                this._fileMap = new ExeConfigurationFileMap();
                if (!string.IsNullOrEmpty(map.MachineConfigFilename))
                {
                    this._fileMap.MachineConfigFilename = Path.GetFullPath(map.MachineConfigFilename);
                }
                ExeConfigurationFileMap map2 = map as ExeConfigurationFileMap;
                if (map2 != null)
                {
                    if (!string.IsNullOrEmpty(map2.ExeConfigFilename))
                    {
                        this._fileMap.ExeConfigFilename = Path.GetFullPath(map2.ExeConfigFilename);
                    }
                    if (!string.IsNullOrEmpty(map2.RoamingUserConfigFilename))
                    {
                        this._fileMap.RoamingUserConfigFilename = Path.GetFullPath(map2.RoamingUserConfigFilename);
                    }
                    if (!string.IsNullOrEmpty(map2.LocalUserConfigFilename))
                    {
                        this._fileMap.LocalUserConfigFilename = Path.GetFullPath(map2.LocalUserConfigFilename);
                    }
                }
            }
        }
        catch (SecurityException)
        {
            throw new ConfigurationErrorsException(SR.GetString("Config_client_config_init_security"));
        }
        catch
        {
            throw ExceptionUtil.UnexpectedError("ClientConfigurationHost::Init");
        }
    }

    public override void InitForConfiguration(ref string locationSubPath, out string configPath, out string locationConfigPath, IInternalConfigRoot configRoot, params object[] hostInitConfigurationParams)
    {
        locationSubPath = null;
        configPath = (string) hostInitConfigurationParams[2];
        locationConfigPath = null;
        this.Init(configRoot, hostInitConfigurationParams);
    }

    public override bool IsConfigRecordRequired(string configPath)
    {
        string name = ConfigPathUtility.GetName(configPath);
        return ((name == "MACHINE") || ((name == "EXE") || ((name == "ROAMING_USER") ? (this.HasRoamingConfig || this.HasLocalConfig) : ((name == "LOCAL_USER") ? this.HasLocalConfig : false))));
    }

    public override bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition)
    {
        string str;
        if (allowExeDefinition > ConfigurationAllowExeDefinition.MachineToApplication)
        {
            if (allowExeDefinition == ConfigurationAllowExeDefinition.MachineToRoamingUser)
            {
                str = "MACHINE/EXE/ROAMING_USER";
            }
            else
            {
                if (allowExeDefinition == ConfigurationAllowExeDefinition.MachineToLocalUser)
                {
                    return true;
                }
                goto TR_0000;
            }
        }
        else if (allowExeDefinition == ConfigurationAllowExeDefinition.MachineOnly)
        {
            str = "MACHINE";
        }
        else if (allowExeDefinition == ConfigurationAllowExeDefinition.MachineToApplication)
        {
            str = "MACHINE/EXE";
        }
        else
        {
            goto TR_0000;
        }
        return (configPath.Length <= str.Length);
    TR_0000:
        throw ExceptionUtil.UnexpectedError("ClientConfigurationHost::IsDefinitionAllowed");
    }

    public override bool IsInitDelayed(IInternalConfigRecord configRecord) => 
        !this._initComplete && this.IsUserConfig(configRecord.ConfigPath);

    public override bool IsTrustedConfigPath(string configPath) => 
        configPath == "MACHINE";

    private bool IsUserConfig(string configPath) => 
        StringUtil.EqualsIgnoreCase(configPath, "MACHINE/EXE/ROAMING_USER") || StringUtil.EqualsIgnoreCase(configPath, "MACHINE/EXE/ROAMING_USER/LOCAL_USER");

    internal static System.Configuration.Configuration OpenExeConfiguration(ConfigurationFileMap fileMap, bool isMachine, ConfigurationUserLevel userLevel, string exePath)
    {
        string str;
        ExeConfigurationFileMap map;
        if ((userLevel != ConfigurationUserLevel.None) && ((userLevel != ConfigurationUserLevel.PerUserRoaming) && (userLevel != ConfigurationUserLevel.PerUserRoamingAndLocal)))
        {
            throw ExceptionUtil.ParameterInvalid("userLevel");
        }
        if (fileMap == null)
        {
            goto TR_000A;
        }
        else
        {
            if (string.IsNullOrEmpty(fileMap.MachineConfigFilename))
            {
                throw ExceptionUtil.ParameterNullOrEmpty("fileMap.MachineConfigFilename");
            }
            map = fileMap as ExeConfigurationFileMap;
            if (map == null)
            {
                goto TR_000A;
            }
            else
            {
                if (userLevel == ConfigurationUserLevel.None)
                {
                    goto TR_000F;
                }
                else if (userLevel == ConfigurationUserLevel.PerUserRoaming)
                {
                    goto TR_0010;
                }
                else if (userLevel == ConfigurationUserLevel.PerUserRoamingAndLocal)
                {
                    if (string.IsNullOrEmpty(map.LocalUserConfigFilename))
                    {
                        throw ExceptionUtil.ParameterNullOrEmpty("fileMap.LocalUserConfigFilename");
                    }
                    goto TR_0010;
                }
                goto TR_000A;
            }
        }
        goto TR_0010;
    TR_000A:
        str = null;
        if (isMachine)
        {
            str = "MACHINE";
        }
        else if (userLevel == ConfigurationUserLevel.None)
        {
            str = "MACHINE/EXE";
        }
        else if (userLevel == ConfigurationUserLevel.PerUserRoaming)
        {
            str = "MACHINE/EXE/ROAMING_USER";
        }
        else if (userLevel == ConfigurationUserLevel.PerUserRoamingAndLocal)
        {
            str = "MACHINE/EXE/ROAMING_USER/LOCAL_USER";
        }
        object[] hostInitConfigurationParams = new object[] { fileMap, exePath, str };
        return new System.Configuration.Configuration(null, typeof(ClientConfigurationHost), hostInitConfigurationParams);
    TR_000F:
        if (string.IsNullOrEmpty(map.ExeConfigFilename))
        {
            throw ExceptionUtil.ParameterNullOrEmpty("fileMap.ExeConfigFilename");
        }
        goto TR_000A;
    TR_0010:
        if (string.IsNullOrEmpty(map.RoamingUserConfigFilename))
        {
            throw ExceptionUtil.ParameterNullOrEmpty("fileMap.RoamingUserConfigFilename");
        }
        goto TR_000F;
    }

    public override Stream OpenStreamForRead(string streamName)
    {
        if (this.IsFile(streamName))
        {
            return base.Host.OpenStreamForRead(streamName);
        }
        if (streamName == null)
        {
            return null;
        }
        WebClient client = new WebClient();
        try
        {
            client.Credentials = CredentialCache.DefaultCredentials;
        }
        catch
        {
        }
        byte[] buffer = null;
        try
        {
            buffer = client.DownloadData(streamName);
        }
        catch
        {
        }
        return ((buffer != null) ? new MemoryStream(buffer) : null);
    }

    public override Stream OpenStreamForWrite(string streamName, string templateStreamName, ref object writeContext)
    {
        if (!this.IsFile(streamName))
        {
            throw ExceptionUtil.UnexpectedError("ClientConfigurationHost::OpenStreamForWrite");
        }
        return base.Host.OpenStreamForWrite(streamName, templateStreamName, ref writeContext);
    }

    public override bool PrefetchAll(string configPath, string streamName) => 
        !this.IsFile(streamName);

    public override bool PrefetchSection(string sectionGroupName, string sectionName) => 
        sectionGroupName == "system.net";

    internal void RefreshConfigPaths()
    {
        if ((this._configPaths != null) && (!this._configPaths.HasEntryAssembly && (this._exePath == null)))
        {
            ClientConfigPaths.RefreshCurrent();
            this._configPaths = null;
        }
    }

    public override void RequireCompleteInit(IInternalConfigRecord record)
    {
        ClientConfigurationHost host = this;
        lock (host)
        {
            if (!this._initComplete)
            {
                this._initComplete = true;
                ClientConfigPaths.RefreshCurrent();
                this._configPaths = null;
                ClientConfigPaths configPaths = this.ConfigPaths;
            }
        }
    }

    string IInternalConfigClientHost.GetExeConfigPath() => 
        "MACHINE/EXE";

    string IInternalConfigClientHost.GetLocalUserConfigPath() => 
        "MACHINE/EXE/ROAMING_USER/LOCAL_USER";

    string IInternalConfigClientHost.GetRoamingUserConfigPath() => 
        "MACHINE/EXE/ROAMING_USER";

    bool IInternalConfigClientHost.IsExeConfig(string configPath) => 
        StringUtil.EqualsIgnoreCase(configPath, "MACHINE/EXE");

    bool IInternalConfigClientHost.IsLocalUserConfig(string configPath) => 
        StringUtil.EqualsIgnoreCase(configPath, "MACHINE/EXE/ROAMING_USER/LOCAL_USER");

    bool IInternalConfigClientHost.IsRoamingUserConfig(string configPath) => 
        StringUtil.EqualsIgnoreCase(configPath, "MACHINE/EXE/ROAMING_USER");

    public override void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo)
    {
        if (!this.IsDefinitionAllowed(configPath, allowDefinition, allowExeDefinition))
        {
            if (allowExeDefinition == ConfigurationAllowExeDefinition.MachineOnly)
            {
                throw new ConfigurationErrorsException(SR.GetString("Config_allow_exedefinition_error_machine"), errorInfo);
            }
            if (allowExeDefinition == ConfigurationAllowExeDefinition.MachineToApplication)
            {
                throw new ConfigurationErrorsException(SR.GetString("Config_allow_exedefinition_error_application"), errorInfo);
            }
            if (allowExeDefinition != ConfigurationAllowExeDefinition.MachineToRoamingUser)
            {
                throw ExceptionUtil.UnexpectedError("ClientConfigurationHost::VerifyDefinitionAllowed");
            }
            throw new ConfigurationErrorsException(SR.GetString("Config_allow_exedefinition_error_roaminguser"), errorInfo);
        }
    }

    // Properties
    internal ClientConfigPaths ConfigPaths
    {
        get
        {
            this._configPaths ??= ClientConfigPaths.GetPaths(this._exePath, this._initComplete);
            return this._configPaths;
        }
    }

    internal static string MachineConfigFilePath
    {
        [FileIOPermission(SecurityAction.Assert, AllFiles=FileIOPermissionAccess.PathDiscovery)]
        get
        {
            s_machineConfigFilePath ??= Path.Combine(Path.Combine(RuntimeEnvironment.GetRuntimeDirectory(), "Config"), "machine.config");
            return s_machineConfigFilePath;
        }
    }

    internal bool HasRoamingConfig =>
        (this._fileMap == null) ? this.ConfigPaths.HasRoamingConfig : !string.IsNullOrEmpty(this._fileMap.RoamingUserConfigFilename);

    internal bool HasLocalConfig =>
        (this._fileMap == null) ? this.ConfigPaths.HasLocalConfig : !string.IsNullOrEmpty(this._fileMap.LocalUserConfigFilename);

    internal bool IsAppConfigHttp =>
        !this.IsFile(this.GetStreamName("MACHINE/EXE"));

    public override bool SupportsRefresh =>
        true;

    public override bool SupportsPath =>
        false;

    public override bool SupportsLocation =>
        false;
}

